<mahApps:MetroWindow
    x:Class="RabbitHole.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mahApps="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:dlg="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
    xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
    xmlns:v="clr-namespace:RabbitHole.Views"
    xmlns:vm="clr-namespace:RabbitHole.ViewModels"
    dlg:DialogParticipation.Register="{Binding}"
    Background="{DynamicResource MaterialDesignPaper}"
    BorderThickness="1"
    FontFamily="pack:application,,,/MaterialDesignThemes.Wpf;conponent/Resources/Roboto/#Roboto"
    GlowBrush="{DynamicResource AccentColorBrush}"
    TextElement.FontSize="18"
    TextElement.FontWeight="Regular"
    TextElement.Foreground="{DynamicResource MaterialDesignBody}"
    TextOptions.TextFormattingMode="Ideal"
    TextOptions.TextRenderingMode="Auto"
    WindowStartupLocation="CenterScreen"
    WindowState="Maximized"
    >

    <b:Interaction.Triggers>
        <!--  Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう  -->
        <!--  Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります  -->
        <!--  Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています  -->

        <!--  WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます  -->
        <b:EventTrigger EventName="Loaded">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </b:EventTrigger>
        <!--  Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます  -->
        <b:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </b:EventTrigger>
        <!--  WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください  -->
    </b:Interaction.Triggers>
    <Grid>
        <Grid.Resources>
            <v:SelectedItemToContentConverter x:Key="SelectedItemToContentConverter" />
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type vm:MenuItemViewModelBase}">
                <Grid
                    x:Name="RootGrid"
                    Height="48"
                    Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mahApps:HamburgerMenu}}, Path=CompactPaneLength}" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentControl
                        Grid.Column="0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Content="{Binding Icon}"
                        Focusable="False" />
                    <TextBlock
                        Grid.Column="1"
                        VerticalAlignment="Center"
                        FontSize="16"
                        Text="{Binding Label}" />
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mahApps:HamburgerMenu}}, Path=IsPaneOpen}" Value="False">
                        <Setter TargetName="RootGrid" Property="ToolTip" Value="{Binding ToolTip, Mode=OneWay}" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!--なんか増やしたいときはここにViewとViewModel追加-->
            <DataTemplate DataType="{x:Type vm:HomeViewModel}">
                <v:HomeView DataContext="{Binding}" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SettingsViewModel}">
                <v:SettingsView DataContext="{Binding}" />
            </DataTemplate>

        </Grid.Resources>

        <mahApps:HamburgerMenu
            x:Name="HamburgerMenuControl"
            DisplayMode="CompactInline"
            IsTabStop="False"
            IsPaneOpen="False"
            ItemTemplate="{StaticResource MenuItemTemplate}"
            ItemsSource="{Binding MenuItems}"
            OptionsItemTemplate="{StaticResource MenuItemTemplate}"
            OptionsItemsSource="{Binding MenuOptionItems}"
            SelectedIndex="{Binding SelectedIndex,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">

            <!--  select the ViewModel of the selected item (options item)  -->
            <mahApps:HamburgerMenu.Content>
                <MultiBinding Converter="{StaticResource SelectedItemToContentConverter}">
                    <Binding
                        FallbackValue="{x:Null}"
                        Mode="OneWay"
                        Path="SelectedItem"
                        RelativeSource="{RelativeSource Self}" />
                    <Binding
                        FallbackValue="{x:Null}"
                        Mode="OneWay"
                        Path="SelectedOptionsItem"
                        RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </mahApps:HamburgerMenu.Content>

        </mahApps:HamburgerMenu>

    </Grid>
</mahApps:MetroWindow>
